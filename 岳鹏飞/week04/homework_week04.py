#week3作业

#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}

#待切分文本
# sentence = "常经有意见分歧"
sentence = "经常有意见分歧"

#实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut(sentence, Dict):
    target = [] # 存放所有的结果

    tmp_cut_words = [] # 用于存放临时切分出的词

    words_stack = [(0, tmp_cut_words)] # 用来记录切分过程的临时词栈。只要从字典中找到相应的词，就会记录当前句子中的位置和对应的词
    while words_stack:
        start, tmp_cut_words = words_stack.pop() # 每次取出最新记录的句子中词的位置和对应的词
        if start == len(sentence): # 如果检查到句子末尾，保存当前的切分
            target.append(tmp_cut_words)
            continue

        #从start位置开始遍历，对照字典查找，一直到句子结束
        for end in range(start + 1, len(sentence) + 1): # 每次查找的步长为1，为了包含最后一个字，所以最大值取句长加一
            word = sentence[start:end]
            if word in Dict:
                words_stack.append((end, tmp_cut_words + [word])) # 保存当前位置和对应查找到的词，下一次开始查找的位置就是此位置

    return target

def main():
    all_words = all_cut(sentence, Dict)
    print("全切分之后的组合：\n")
    for word in all_words:
        print(word)

if __name__ == '__main__':
    main()
# #目标输出;顺序不重要
# target = [
#     ['经常', '有意见', '分歧'],
#     ['经常', '有意见', '分', '歧'],
#     ['经常', '有', '意见', '分歧'],
#     ['经常', '有', '意见', '分', '歧'],
#     ['经常', '有', '意', '见分歧'],
#     ['经常', '有', '意', '见', '分歧'],
#     ['经常', '有', '意', '见', '分', '歧'],
#     ['经', '常', '有意见', '分歧'],
#     ['经', '常', '有意见', '分', '歧'],
#     ['经', '常', '有', '意见', '分歧'],
#     ['经', '常', '有', '意见', '分', '歧'],
#     ['经', '常', '有', '意', '见分歧'],
#     ['经', '常', '有', '意', '见', '分歧'],
#     ['经', '常', '有', '意', '见', '分', '歧']
# ]

