#week3作业

#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}

#待切分文本
sentence = "常经有意见分歧"

#实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut(sentence, Dict):
    result = []  # 存储所有切分方式

    def dfs(start, path):
        # start: 当前搜索的起始位置
        # path: 当前切分的路径
        if start == len(sentence):  # 如果已经搜索到文本末尾
            result.append((path[:], sum(Dict[word] for word in path)))  # 保存当前切分路径及其权重和
            return

        for end in range(len(sentence), start, -1):  # 从长到短枚举子串，优先匹配长词
            word = sentence[start:end]  # 当前子串
            for key in Dict:  # 检查字典中所有词是否是当前子串的重排序（忽略顺序匹配）
                if sorted(word) == sorted(key):
                    path.append(key)  # 使用字典中实际词替代当前子串
                    dfs(end, path)  # 递归搜索剩余部分
                    path.pop()  # 回溯，撤销上一步操作

    dfs(0, [])  # 从位置0开始搜索
    return result
all_results = all_cut(sentence, Dict)

# 按权重和降序排序
sorted_results = sorted(all_results, key=lambda x: -x[1])

# 格式化输出
for i, (r, score) in enumerate(sorted_results):
    print(f"切分方式 {i + 1}: {r}，权重和: {score:.3f}")

#目标输出;顺序不重要
target = [
    ['经常', '有意见', '分歧'],
    ['经常', '有意见', '分', '歧'],
    ['经常', '有', '意见', '分歧'],
    ['经常', '有', '意见', '分', '歧'],
    ['经常', '有', '意', '见分歧'],
    ['经常', '有', '意', '见', '分歧'],
    ['经常', '有', '意', '见', '分', '歧'],
    ['经', '常', '有意见', '分歧'],
    ['经', '常', '有意见', '分', '歧'],
    ['经', '常', '有', '意见', '分歧'],
    ['经', '常', '有', '意见', '分', '歧'],
    ['经', '常', '有', '意', '见分歧'],
    ['经', '常', '有', '意', '见', '分歧'],
    ['经', '常', '有', '意', '见', '分', '歧']
]

