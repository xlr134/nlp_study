"""
week4 实现基于词表的全切分

输入1
    词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
输入2
    待切分文本

输出
    实现全切分函数，输出根据字典能够切分出的所有的切分方式

例子
    #词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
    Dict = {"经常":0.1,
            "经":0.05,
            "有":0.1,
            "常":0.001,
            "有意见":0.1,
            "歧":0.001,
            "意见":0.2,
            "分歧":0.2,
            "见":0.05,
            "意":0.05,
            "见分歧":0.05,
            "分":0.1}

    #待切分文本
    sentence = "经常有意见分歧"

    #实现全切分函数，输出根据字典能够切分出的所有的切分方式
    def all_cut(sentence, Dict):
        #TODO
        return target

    #目标输出;顺序不重要
    target = [
        ['经常', '有意见', '分歧'],
        ['经常', '有意见', '分', '歧'],
        ['经常', '有', '意见', '分歧'],
        ['经常', '有', '意见', '分', '歧'],
        ['经常', '有', '意', '见分歧'],
        ['经常', '有', '意', '见', '分歧'],
        ['经常', '有', '意', '见', '分', '歧'],
        ['经', '常', '有意见', '分歧'],
        ['经', '常', '有意见', '分', '歧'],
        ['经', '常', '有', '意见', '分歧'],
        ['经', '常', '有', '意见', '分', '歧'],
        ['经', '常', '有', '意', '见分歧'],
        ['经', '常', '有', '意', '见', '分歧'],
        ['经', '常', '有', '意', '见', '分', '歧']
    ]

    14种
"""

"""
实现思路:
全切分最核心的思路是通过“从头开始、尝试所有可能的切分路径”，然后递归（或迭代）向后推进，直到句子末尾。
可以将其类比为深度优先搜索（DFS）或者回溯算法：

从句子的开头位置出发，依次取不同长度的子串，判断是否在词典中。
如果符合词典，则把它加入当前切分路径，并继续向后探索下一段；如果当前子串不在词典中，就尝试换一个长度。
当搜索指针到达句子末尾，就得到了一条完整的切分方案，将其加入结果。
为了得到“全切分”，每遇到候选子串都不放过，一一递归到底，这样就会得到所有可能的切分路径。
这个过程会产生大量的组合，因此在实际应用中通常还需要用概率、统计或规则来挑选合理的切分答案，或者进一步分析歧义、发现新词等。
"""


def all_cut(sentence, word_dict):
    """
    基于词典 word_dict 对句子 sentence 进行全切分，
    返回所有可能的切分结果（每种切分方式由词序列组成）。
    """
    results = []
    n = len(sentence)

    def dfs(start, path):
        if start == n:
            # 当指针到达句子末尾，收集当前分词结果
            results.append(path[:])
            return

            # 尝试所有可能的分割位置
        for end in range(start + 1, n + 1):
            candidate = sentence[start:end]
            if candidate in word_dict:
                path.append(candidate)
                dfs(end, path)
                path.pop()

    dfs(0, [])
    return results


# 使用示例
if __name__ == "__main__":
    # 词典示例（词后存储的次数或概率可以忽略，不影响切分逻辑）
    Dict = {
        "经常": 0.1,
        "经": 0.05,
        "有": 0.1,
        "常": 0.001,
        "有意见": 0.1,
        "歧": 0.001,
        "意见": 0.2,
        "分歧": 0.2,
        "见": 0.05,
        "意": 0.05,
        "见分歧": 0.05,
        "分": 0.1
    }

    sentence = "经常有意见分歧"
    segmentations = all_cut(sentence, Dict)
    for seg in segmentations:
        print(seg)

        # 打印结果和统计信息
    print(f"总共找到 {len(segmentations)} 种切分方式：")
