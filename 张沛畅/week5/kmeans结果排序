import numpy as np
from sklearn.cluster import KMeans


def euclidean_distance(point1, point2):
    """
    计算两个点之间的欧几里得距离
    :param point1: 第一个点，numpy 数组
    :param point2: 第二个点，numpy 数组
    :return: 欧几里得距离
    """
    return np.sqrt(np.sum((point1 - point2) ** 2))


def average_intra_cluster_distance(data, labels, centers):
    """
    计算每个簇的平均类内距离
    :param data: 输入数据，numpy 数组
    :param labels: 每个数据点的簇标签，numpy 数组
    :param centers: 簇中心，numpy 数组
    :return: 每个簇的平均类内距离，numpy 数组
    """
    n_clusters = len(centers)
    avg_distances = []
    for i in range(n_clusters):
        cluster_points = data[labels == i]
        distances = [euclidean_distance(point, centers[i]) for point in cluster_points]
        avg_distances.append(np.mean(distances))
    return np.array(avg_distances)


def main():
    # 示例数据，这里使用随机数据
    np.random.seed(42)
    data = np.random.rand(100, 2)
    # 进行 Kmeans 聚类，假设聚为 5 类
    kmeans = KMeans(n_clusters=5, random_state=42).fit(data)
    labels = kmeans.labels_
    centers = kmeans.cluster_centers_
    # 计算每个簇的平均类内距离
    avg_distances = average_intra_cluster_distance(data, labels, centers)
    # 对簇进行排序，按照平均类内距离从小到大排序
    sorted_indices = np.argsort(avg_distances)
    print("排序后的簇索引:", sorted_indices)


if __name__ == "__main__":
    main()
