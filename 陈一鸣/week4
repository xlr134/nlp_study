import jieba

Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}

def cal_DAG(sentence):
    len_sentence = len(sentence)
    DAG = {}
    for k in range(len_sentence):
        dag_list = []
        i = k
        flag = sentence[k]
        while (i < len_sentence):
            if flag in Dict:
                dag_list.append(i)
            i += 1
            flag = sentence[k : i + 1]
            if not dag_list:
                dag_list.append(k)
        DAG[k] = dag_list
    return DAG

class DAGDecode:
    #通过两个队列来实现
    def __init__(self, sentence):
        self.sentence = sentence
        self.DAG = cal_DAG(sentence)
        self.length = len(sentence)
        self.unfinish_path = [[]]
        self.finish_path = []

    def decode_next(self, path):
        path_length = len("".join(path))
        if path_length == self.length:  #已完成解码
            self.finish_path.append(path)
            return
        candidates = self.DAG[path_length]
        new_paths = []
        for candidate in candidates:
            new_paths.append(path + [self.sentence[path_length:candidate+1]])
        self.unfinish_path += new_paths
        return

    #递归调用序列解码过程
    def decode(self):
        while self.unfinish_path != []:
            path = self.unfinish_path.pop() #从待解码队列中取出一个序列
            self.decode_next(path)     #使用该序列进行解码


sentence = "经常有意见分歧"
dd = DAGDecode(sentence)
dd.decode()
print(dd.finish_path)
