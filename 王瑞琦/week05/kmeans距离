 #!/usr/bin/env python3
#coding: utf-8

#基于训练好的词向量模型进行聚类
#聚类采用Kmeans算法
import math
import jieba
import numpy as np
from gensim.models import Word2Vec
from sklearn.cluster import KMeans
from collections import defaultdict

#输入模型文件路径
#加载训练好的模型
def load_word2vec_model(path):
    model = Word2Vec.load(path)
    return model

def load_sentence(path):
    sentences = set()
    with open(path, encoding="utf8") as f:
        for line in f:
            sentence = line.strip()
            sentences.add(" ".join(jieba.cut(sentence)))
    print("获取句子数量：", len(sentences))
    return sentences

#将文本向量化
def sentences_to_vectors(sentences, model):
    vectors = []
    for sentence in sentences:
        words = sentence.split()  #sentence是分好词的，空格分开
        vector = np.zeros(model.vector_size)
        #所有词的向量相加求平均，作为句子向量
        for word in words:
            try:
                vector += model.wv[word]
            except KeyError:
                #部分词在训练中未出现，用全0向量代替
                vector += np.zeros(model.vector_size)
        vectors.append(vector / len(words))
    return np.array(vectors)

def main():
    model = load_word2vec_model(r"C:\Users\86188\OneDrive - 厦门大学(马来西亚分校)\桌面\【八斗学院】\八斗精品课\week5 词向量及文本向量\model.w2v") #加载词向量模型
    sentences = load_sentence("titles.txt")  #加载所有标题
    vectors = sentences_to_vectors(sentences, model)   #将所有标题向量化

    n_clusters = int(math.sqrt(len(sentences)))  #指定聚类数量
    print("指定聚类数量：", n_clusters)
    kmeans = KMeans(n_clusters)  #定义一个kmeans计算类
    kmeans.fit(vectors)          #进行聚类计算

    # 计算每个点到其聚类中心的距离
    distances = kmeans.transform(vectors)  # 获取每个点到聚类中心的距离
    distances = np.sqrt(np.sum((distances ** 2), axis=1))  # 计算欧氏距离

    # 将句子和对应的距离存储在列表中
    sentence_distance_list = list(zip(sentences, distances))

    # 根据距离排序
    sorted_sentence_distance_list = sorted(sentence_distance_list, key=lambda x: x[1])

    # 打印排序后的句子和距离
    for label, (sentence, distance) in enumerate(sorted_sentence_distance_list):
        print("Sentence: %s, Distance: %.4f" % (sentence.replace(" ", ""), distance))
        if label >= 9:  # 打印前10个句子
            break
        print("---------")

if __name__ == "__main__":
    main()
