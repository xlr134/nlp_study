# #week3作业  
#
#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改  
Dict = {"经常":0.1,  
        "经":0.05,  
        "有":0.1,  
        "常":0.001,  
        "有意见":0.1,  
        "歧":0.001,  
        "意见":0.2,  
        "分歧":0.2,  
        "见":0.05,  
        "意":0.05,  
        "见分歧":0.05,  
        "分":0.1}  

#待切分文本  
sentence = "常经有意见分歧"  

#实现全切分函数，输出根据字典能够切分出的所有的切分方式  
def all_cut(sentence, Dict):  
    def backtrack(start, path):  
        # 如果当前位置已经到达句子末尾，且路径不为空，则添加到结果中  
        if start == len(sentence) and path:  
            result.append(path[:])  
            return
        # 尝试从当前位置开始的所有可能的词长
        for end in range(start + 1, len(sentence) + 1):
            word = sentence[start:end]
            # 如果这个词在词典中，则将其添加到当前路径中，并递归下一个位置
            if word in Dict:
                path.append(word)
                backtrack(end, path)
                # 回溯，移除当前词，尝试下一个可能的词
                path.pop()

    result = []
    backtrack(0, [])
    return result
print(all_cut(sentence, Dict))

# #目标输出;顺序不重要
# target = [
#     ['经常', '有意见', '分歧'],
#     ['经常', '有意见', '分', '歧'],
#     ['经常', '有', '意见', '分歧'],
#     ['经常', '有', '意见', '分', '歧'],
#     ['经常', '有', '意', '见分歧'],
#     ['经常', '有', '意', '见', '分歧'],
#     ['经常', '有', '意', '见', '分', '歧'],
#     ['经', '常', '有意见', '分歧'],
#     ['经', '常', '有意见', '分', '歧'],
#     ['经', '常', '有', '意见', '分歧'],
#     ['经', '常', '有', '意见', '分', '歧'],
#     ['经', '常', '有', '意', '见分歧'],
#     ['经', '常', '有', '意', '见', '分歧'],
#     ['经', '常', '有', '意', '见', '分', '歧']
# ]

